name: CI/CD chat-service

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18] # Specify Node.js versions to test against

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test

      - name: Jest Coverage
        run: npx jest --coverage
        env:
          NODE_ENV: test

      - name: Security Audit
        run: npm audit --production
        continue-on-error: true # Continue even if vulnerabilities are found

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' # Only deploy on main branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18' # Use the latest stable version for deployment

      - name: Install dependencies
        run: npm install --production

      - name: Build application
        run: npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          zeit-token: ${{ secrets.VERCEL_DEPLOY }}
          vercel-token: ${{ secrets.VERCEL_DEPLOY }}
          vercel-args: '--prod' # Deploy to production
          working-directory: ./chat-service
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  notify:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Notify build status
        run: echo "Build and deployment completed successfully!"
        # Here you can add steps to send notifications to Slack, Email, etc.
